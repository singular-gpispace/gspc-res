<!-- Used Control to count place E and place N-->
<!--T1 and T2 sequential-->
<defun name="template">
<!-- Struct definitions -->
    <struct name="Std_basis">
        <field name="InputGB" type="string"/>
        <field name="ngen" type="int"/>
    </struct>
      <struct name="lifting">
        <field name="lead_Syz" type="string"/>
        <field name="lift" type="string"/>
        <field name="leadsyz_count" type="int"/>
    </struct>

	<in name="base_filename" type="string" place="place_base_filename"/>
	<in name="library_name" type="string" place="place_library_name"/>
  <in name="input" type="string" place="place_input"/>
  <out name ="OUTPUT" type ="string" place ="place_Syz"/>
  
	<net>
   <place name ="place_input" type ="string"/>
    <place name ="place_input_GB" type ="string"/>
		<place name="place_base_filename" type="string"/>
		<place name="place_library_name" type="string"/>
    <place name ="place_All_Lead" type ="string"/>
    
    <place name="place_lead" type="string"/>
    <place name="place_Tau" type="string"/>
     <place name ="place_Res" type="string"/>
    <place name ="place_SubLift" type ="string"/>
    <place name ="place_E" type ="control"/>
    <place name ="place_N" type ="control"/>
     <place name ="place_Syz" type ="string"/>
    <place name="place_leadsyz_counter" type="control"/>
    <place name="place_counter" type="int"/>
    <place name ="place_nsummand" type ="control"/>
     
    <place name="E" type="int">
      <token>
        <value>0</value>
      </token>
    </place>
    <place name="N" type="int">
      <token>
        <value>0</value>
      </token>
    </place>




<place name="place_Init" type="string">
 
</place>
    <!-- transition_Init-->
  
     <transition name="Initiate">
      <defun>
        		<require key="worker" mandatory="true"/>
        		
				    <in name="input" type="string"/>
        		<out name="output" type="string"/>
            <out name ="res" type ="string"/>
            <out name ="c" type ="control"/>
           <out name ="init" type ="string"/>
        		<module name="singular_template"
              		require_function_unloads_without_rest="false"
              		function="Init(res,c, input,init, output)">
          		<cinclude href="interface/template_interface.hpp" />
          		<cinclude href="util-generic/dynamic_linking.hpp"/>
          			<code><![CDATA[
						 output = RESOLVE_INTERFACE_FUNCTION(singular_template_Init) (input);
              init=output;
              res=output;
            		]]></code>
        		</module>
      		</defun>
      	
			  <connect-in port="input" place="place_input"/>
			  <connect-out port="output" place="place_input_GB"/>
        <connect-out port="res" place="place_Res"/>
        <connect-out port="c" place="place_control"/>
        <connect-out port="init" place="place_Init"/>
        
  		  </transition>

        




<place name="place_control_All_Lead" type="control">
  <token><value>[]</value></token>
</place>
    <!-- transition_compute-->
  
     <transition name="All_Lead">
      <defun>
        <require key="worker" mandatory="true"/>
        		
        <in name="library_name" type="string"/>
        <in name="base_filename" type="string"/>
				    
        		<out name="output" type="string"/>
           <in name ="C" type="control"/>
           <in name ="init" type ="string"/>
        		<module name="singular_template"
              		require_function_unloads_without_rest="false"
              		function="All_Lead(init, output,C, library_name, base_filename)">
          		<cinclude href="interface/template_interface.hpp" />
          		<cinclude href="util-generic/dynamic_linking.hpp"/>
        <cinclude href="vector"/>
        <cinclude href="iostream"/>
        <cinclude href ="string"/>
        <cinclude href="list"/>
        <cinclude href="numeric"/> 
          			<code><![CDATA[
                  std::cout <<"All_LeadSyz_Input:"<<init<< std::endl;
					output = RESOLVE_INTERFACE_FUNCTION( singular_template_all_leadsyz_GpI) (init,library_name, base_filename);
              
             std::cout <<"AllLeadSyz_output:"<<output<< std::endl;
            		]]></code>
        		</module>
      		</defun>
      	<connect-read port="library_name" place="place_library_name"/>
        <connect-read port="base_filename" place="place_base_filename"/>
			  <connect-in port="init" place="place_Init"/>
        <connect-in port="C" place="place_control_All_Lead"/>
			  <connect-out port="output" place="place_All_Lead"/>
      
        
  		  </transition>











<place name="place_control" type="control">
 
</place>


        <!-- Transition 1: lead -->
    <transition name="LEADSYZ">
     <defun>
        <require key="worker" mandatory="true"/>
        <in name="library_name" type="string"/>
        <in name="base_filename" type="string"/>
        <in name="input" type="string"/>
        <in name ="s" type ="control"/>
        <out name="OUT" type="list"/>
         <out name="leadsyz_counter" type="list"/>
        <out name ="Sublift" type ="list"/>
        <out name="counter" type="int"/>
      <module name="singular_template"
                require_function_unloads_without_rest="false"
                function="leadsyz(input,s,counter,leadsyz_counter,Sublift,OUT,library_name,base_filename)">
        <cinclude href="interface/template_interface.hpp" />
        <cinclude href="util-generic/dynamic_linking.hpp"/>
        <cinclude href="vector"/>
        <cinclude href="iostream"/>
        <cinclude href ="string"/>
        <cinclude href="list"/>
        <cinclude href="numeric"/> 


            <code><![CDATA[
                   
                   std::pair<std::vector<std::string>, int> out = RESOLVE_INTERFACE_FUNCTION(singular_template_leadSyzGPI)
                        (input, library_name, base_filename);
                       counter=out.second;
                       // std::cout << "out.first:"<<out.first.size() << std::endl;
                         for(int i (0); i<out.first.size(); i++)
                                                                 {
                          //std::cout << "leadSyz_Success:"<<out.first[i] << std::endl;
                          OUT.emplace_back(out.first[i]);
                          Sublift.emplace_back(out.first[i]);
                         std::cout << "leadSyz_Success:"<<out.first[i] << std::endl;
                          //std::cout << "SubliftleadSyz_Success:"<<out.first[i] << std::endl;
                          
                          }
                for (int i (0); i<out.second; ++i)
                {
                   leadsyz_counter.emplace_back(we::type::literal::control{});
                }
                      
               
                           



                              

            ]]></code>
        </module>
      </defun>
      <connect-read port="library_name" place="place_library_name"/>
      <connect-read port="base_filename" place="place_base_filename"/>
      <connect-read port="input" place="place_input_GB"/>
      <connect-in port="s" place="place_control"/>
      <connect-out-many port="OUT" place="place_lead"/>
      <connect-out-many port="Sublift" place="place_SubLift"/>
      <connect-out-many port="leadsyz_counter" place="place_N"/>
       <connect-out port="counter" place="place_counter"/>
    </transition>








     <!-- Transition 2: LIFT-->

      <transition name="LIFT">
        <defun>
     <require key="worker" mandatory="true"/>
     <in name ="input_name" type= "string"/>
     <in name="needed_library" type="string"/>
     <in name="base_filename" type="string"/>
     <in name ="lead" type = "string"/>
     <in name ="all_lead" type= "string"/>
     <out name="N" type="list"/>
    <out name="E" type ="control"/>
     <out name ="LIFT" type= "list"/>
    

             <module name="singular_template"
            require_function_unloads_without_rest="false"
            function="LIFT(input_name,lead,N,E,LIFT,all_lead,needed_library,base_filename)">
            <cinclude href="interface/template_interface.hpp" />
           <cinclude href="util-generic/dynamic_linking.hpp"/>
           <cinclude href="vector"/>
        <cinclude href="iostream"/>
        <cinclude href ="string"/>
        <cinclude href="list"/>
        <cinclude href="numeric"/> 

            


            <code><![CDATA[
              std::cout << "LIFT_All_Lead:"<<all_lead << std::endl;
                   //std::cout << "in singular _PetriNet_.._LIFT" << std::endl;
                   std::pair<std::vector<std::string>, int> out = RESOLVE_INTERFACE_FUNCTION(singular_template_LIFT)
                 (input_name, lead,all_lead, needed_library, base_filename);
                       
                       //std::cout << "LIFT_COUNT:"<< lift_count << std::endl;
                        
                         for(int i (0); i<out.first.size(); i++)
                                                                 {
                         std::cout << "LIFT_Success:"<<out.first[i] << std::endl;
                          LIFT.emplace_back(out.first[i]);
                       
                         
                         
      
                    }
                    if(out.second==0){
                      E={};
                    } else{
                           
                for (int i (0); i<out.second-1; ++i)
                {
                   N.emplace_back(we::type::literal::control{});
                }
               
                    }
              
               //std::cout << "LIFT_Success:"<<lift_count << std::endl;
                              

            ]]></code>
            </module>
               
   </defun>

  <connect-read port="needed_library" place="place_library_name"/> 
   <connect-read port="base_filename" place="place_base_filename"/>
  <connect-read port="input_name" place="place_input_GB"/>
  <connect-read port="all_lead" place="place_All_Lead"/>
  <connect-in port="lead" place="place_lead"/>
  <connect-out-many port="LIFT" place="place_Tau"/>
  <connect-out-many port="N" place="place_N"/>
  <connect-out port="E" place="place_E"/>




  </transition> 
  
      









     <!-- Transition 4: SubLIFT-->

      <transition name="SubLIFT">
        <defun>
     <require key="worker" mandatory="true"/>
    
     <in name="needed_library" type="string"/>
     <in name="base_filename" type="string"/>
    
     <in name ="input_name" type= "string"/>
     <in name="Tau" type="string"/>
     <out name ="lift_count" type ="control"/>
     <out name="N" type="list"/>
     <out name="E" type="control"/>
     <out name ="LIFT" type= "list"/>
     <out name ="SUBLIFT" type= "string"/>
    

             <module name="singular_template"
            require_function_unloads_without_rest="false"
            function="SUBLIFT(input_name,Tau,LIFT,N,E,SUBLIFT,lift_count,needed_library,base_filename)">
            <cinclude href="interface/template_interface.hpp" />
           <cinclude href="util-generic/dynamic_linking.hpp"/>
           <cinclude href="vector"/>
        <cinclude href="iostream"/>
        <cinclude href ="string"/>
        <cinclude href="list"/>
        <cinclude href="numeric"/> 

            
               
                    
                

            <code><![CDATA[
                   //std::cout << "in singular _PetriNet_.._SubLIFT" << std::endl;
                           
                   std::pair<std::vector<std::string>, int> out = RESOLVE_INTERFACE_FUNCTION(singular_template_SUBLIFT)
                 (input_name,Tau, needed_library, base_filename);
                       
                     
                        
                         for(int i (0); i<out.first.size(); i++)
                                                                 {
                         //std::cout << "SUBLIFT_Success:"<<out.first[i] << std::endl;
                          LIFT.emplace_back(out.first[i]);
                          
                         
                          
                          
                       
                    
                         
      
                    }
            if(out.second==0){
                      E={};
              } else if (out.second>=1)
                {
                           
                for (int i (0); i<out.second-1; ++i)
                {
                   N.emplace_back(we::type::literal::control{});
                }
               
            }

                    SUBLIFT = Tau;
                   //std::cout << "SubLIFT_Place_E:" << E<< std::endl;
                  //std::cout << "SubLIFT_COUNT:"<< out.second << std::endl;        
               
            ]]></code>
            
            </module>
               
   </defun>

  <connect-read port="needed_library" place="place_library_name"/> 
   <connect-read port="base_filename" place="place_base_filename"/>
  <connect-read port="input_name" place="place_input_GB"/>
  <connect-in port="Tau" place="place_Tau"/>
  <connect-out-many port="LIFT" place="place_Tau"/>
  <connect-out port="SUBLIFT" place="place_SubLift"/>
  <connect-out-many port="N" place="place_N"/>
  <connect-out port="E" place="place_E"/>
  <connect-out port ="lift_count" place="place_leadsyz_counter"/>
  
  
  
  </transition> 


  
<place name="up_init" type="control">
  <token><value>[]</value></token>
</place>
<place name="down_init" type="control"/>




    <transition name="T1">
      <defun>
        <inout name="a" type="int"/>
        <in name="n" type="control"/>
       <inout name="s" type="control"/>
        <module name="singular_template" function="Up(a)">
        <cinclude href="iostream"/>
        <code><![CDATA[
       //std::cout << "T1: " << a << std::endl;
        a = a + 1;
        //std::cout << "T1: " << a << std::endl;
        ]]></code>
        </module>
      </defun>
      <connect-in port="s" place="up_init"/>
      <connect-out port="s" place="down_init"/>
      <connect-in port="n" place="place_N"/>
      <connect-in port="a" place="N"/>
      <connect-out port="a" place="N"/>
    </transition>





    <transition name="T2">
      <defun>
        <inout name="a" type="int"/>
        <in name="e" type="control"/>
       <inout name="s" type="control"/>
        <module name="singular_template" function="down(a)">
        <cinclude href="iostream"/>
        <code><![CDATA[
       //std::cout << "T2: " << a << std::endl;
        a = a + 1;
        //std::cout << "T2: " << a << std::endl;
        ]]></code>
        </module>
      </defun>
      <connect-out port="s" place="up_init"/>
      <connect-in port="s" place="down_init"/>
      <connect-in port="e" place="place_E"/>
      <connect-in port="a" place="E"/>
      <connect-out port="a" place="E"/>
    </transition>




<!-- Increment Transition5 -->
<transition name="Increment">
  <defun>
    <inout name="s" type="int"/>
    <in name="lift_count" type="control"/>
    
    <module name="singular_template" function="Increment(s)">
      <cinclude href="interface/template_interface.hpp" />
      <cinclude href="util-generic/dynamic_linking.hpp"/>
      <cinclude href="iostream"/>
      <code><![CDATA[
       
        //std::cout << "Increment Transition - Before: " << s << std::endl;
        s = s + 1;
        //std::cout << "Increment Transition - After: " << s << std::endl;
       
      ]]></code>
    </module>
  </defun>
  <connect-in port="lift_count" place="place_leadsyz_counter"/>
  <connect-inout port="s" place="place_counter"/>
  
 
</transition>


  
<place name="left_init" type="control">
  <token><value>[]</value></token>
</place>
<place name="right_init" type="control"/>
<place name="L" type="string"/>
<place name="R" type="string"/>



    <transition name="LHS">
      <defun>
        <inout name="a" type="string"/>
        <inout name="s" type="control"/>

        <module name="singular_template" function="count(a)">
        <cinclude href="iostream"/>
        <code><![CDATA[
       //std::cout << "LHS: " << a << std::endl;
        ]]></code>
        </module>
      </defun>
      <connect-in port="s" place="left_init"/>
      <connect-out port="s" place="right_init"/>
      <connect-in port="a" place="place_SubLift"/>
      <connect-out port="a" place="L"/>
    </transition>




  
<transition name="RHS">
      <defun>
        <inout name="a" type="string"/>
        <inout name="s" type="control"/>
        <module name="singular_template" function="plus(a)">
        <cinclude href="iostream"/>
        <code><![CDATA[
       // std::cout << "RHS: " << a << std::endl;
        ]]></code>
        </module>
      </defun>
      <connect-in port="a" place="place_SubLift"/>
      <connect-in port="s" place="right_init"/>
      <connect-out port="s" place="left_init"/>
      <connect-out port="a" place="R"/>

    </transition>


<!-- Transition 5: Reduce-->
    <transition name="Reduce">
      <defun>
      <require key="worker" mandatory="true"/>
    
     <in name="library_name" type="string"/>
     <in name="base_filename" type="string"/>
        <out name="s" type="string"/>
        <in name="l" type="string"/>
        <in name="r" type="string"/>
        <in name="input" type="string"/>
         <out name ="nsummand" type ="control"/>
     <module name="singular_template"
              		require_function_unloads_without_rest="false"
              		function="reduce(library_name,base_filename,input,nsummand, s,l,r)">
          		<cinclude href="interface/template_interface.hpp" />
          		<cinclude href="util-generic/dynamic_linking.hpp"/>
              <cinclude href="iostream"/>
          			<code><![CDATA[
                  std::cout << "Reduce_Input" <<input << std::endl;
                  std::cout << "Reduce_l" << l << std::endl;
                  std::cout << "Reduce_r" << r<< std::endl;
						s = RESOLVE_INTERFACE_FUNCTION(singular_template_reduce)(input,l,r,library_name, base_filename
							); 
            std::cout << "Reduce:" << s << std::endl;
            		]]></code>
                 
        		</module>
      </defun>
      <connect-read port="library_name" place="place_library_name"/> 
      <connect-read port="base_filename" place="place_base_filename"/>
      <connect-read port="input" place="place_input_GB"/>
      <connect-in port="l" place="L"/>
      <connect-in port="r" place="R"/>
      <connect-out port="s" place="place_SubLift"/>
      <connect-out port ="nsummand" place="place_nsummand"/>
      
       
    </transition> 



    
<!-- Decrement Transition -->
<transition name="Decrement">
  <defun>
    <inout name="s" type="int"/>
    
    <in name="g" type ="control"/>
    <module name="singular_template" function="Decrement(s)">
      <cinclude href="interface/template_interface.hpp" />
      <cinclude href="util-generic/dynamic_linking.hpp"/>
      <cinclude href="iostream"/>
      <code><![CDATA[
       // std::cout << "Decrement Transition - Before: " << s << std::endl;
        s = s - 1;
       // std::cout << "Decrement Transition - After: " << s << std::endl;
      ]]></code>
    </module>
  </defun>
 
  <connect-inout port="s" place="place_counter"/>
  
   <connect-in port ="g" place="place_nsummand"/>
 
</transition>













<transition name="Result">
  <defun>
   
    
     <inout name="s" type="string"/>
    <in name="counter" type="int"/>
    <in name="N" type="int"/>
   
    <in name="E" type="int"/>
    <module name="singular_template" function="result(s,counter,N,E)">
      <cinclude href="interface/template_interface.hpp" />
      <cinclude href="util-generic/dynamic_linking.hpp"/>
       <cinclude href="iostream"/>
      <code><![CDATA[
        
         
        std::cout << "Result_Success: " << s<< std::endl;
        // std::cout << "counter: " <<counter<< std::endl;
         //std::cout << "place_E: " <<E<< std::endl;
         //std::cout << "place_N: " <<N<< std::endl;
          
      ]]></code>
    </module>
       <condition>
      ${counter}:eq:1 :and: ${N}:eq:${E}
    </condition>
   

   

  </defun>
  <connect-in port="counter" place="place_counter"/>
  <connect-in port="s" place="L"/>
 
 
  <connect-out port="s" place="place_Syz"/>
  <connect-in port="E" place="E"/>
  <connect-in port="N" place="N"/>
</transition>


<!-- Transition 11: Generate-->
<transition name="Generate">
  <defun>
   
    <in name="syz" type="string"/>
    <in name="res" type="string"/>
    <out name="Res" type ="list"/>
    <in name="input" type="string"/>
    <out name ="Input" type="string"/>
    <out name="c" type ="control"/>
    <module name="singular_template" function="Generate(res, Res, input,Input, c,syz)">
      <cinclude href="interface/template_interface.hpp" />
      <cinclude href="util-generic/dynamic_linking.hpp"/>
       <cinclude href="iostream"/>
      <code><![CDATA[
       std::cout << "Generate_Success:"<<input<< std::endl;
       std::cout << "Generate_Success:"<<syz<< std::endl;
       std::cout << "Generate_Success:"<<c<< std::endl;
       Input=syz;
       Res.emplace_back(res);
       Res.emplace_back(syz);
        c={};
     
      ]]></code>
    </module>
    
     

  </defun>
  <connect-in port="input" place="place_input_GB"/>
  <connect-in port="res" place="place_Res"/>
  <connect-in port="syz" place="place_Syz"/>
  <connect-out port="Input" place="place_input_GB"/>
  <connect-out port="c" place="place_control"/>
  <connect-out-many port="Res" place="place_Res"/>
</transition>

  






  </net>
</defun>