
<defun name="template">
<!-- Struct definitions -->
    <struct name="Std_basis">
        <field name="InputGB" type="string"/>
        <field name="ngen" type="int"/>
    </struct>
      <struct name="lifting">
        <field name="lead_Syz" type="string"/>
        <field name="lift" type="string"/>
        <field name="leadsyz_count" type="int"/>
    </struct>

	<in name="base_filename" type="string" place="place_base_filename"/>
	<in name="library_name" type="string" place="place_library_name"/>
  <in name="input" type="string" place="place_input"/>
  <out name ="OUTPUT" type ="string" place ="place_SchFrame"/>
  
	<net>
    <place name ="place_input" type ="string"/>
    <place name ="place_input_GB" type ="string"/>
		<place name="place_base_filename" type="string"/>
		<place name="place_library_name" type="string"/>
   
   
   
<place name="place_SchFrame" type="string"/>
  
  

     <place name="place_SchFrame_counter" type="int"/>
  
  

   
   
  <place name ="place_SchFrame_runtime" type ="long"/>

      

 

    <!-- transition_Init-->
  
     <transition name="Initiate">
      <defun>
        		<require key="worker" mandatory="true"/>
        		
				    <in name="input" type="string"/>
        		<out name="output" type="string"/>
            
           
          
        		<module name="singular_template"
              		require_function_unloads_without_rest="false"
              		function="Init(input,output)">
          		<cinclude href="interface/template_interface.hpp" />
          		<cinclude href="util-generic/dynamic_linking.hpp"/>
                 <cinclude href="iostream"/>
          			<code><![CDATA[
                     std::cout <<"Initiate:"<< std::endl;
						 output = RESOLVE_INTERFACE_FUNCTION(singular_template_Init) (input);
          
              
            		]]></code>
        		</module>
      		</defun>
      	
			  <connect-in port="input" place="place_input"/>
			  <connect-out port="output" place="place_input_GB"/>
      
    
        
  		  </transition>




        <!-- Transition 1: SchFrame -->
    <transition name="SchFrame">
     <defun>
        <require key="worker" mandatory="true"/>
        <in name="library_name" type="string"/>
        <in name="base_filename" type="string"/>
        <in name="input" type="string"/>
      
      
        <out name="runtime" type ="long"/>
        <out name="counter" type="int"/>
        <out name="OUT" type="list"/>
       
      <module name="singular_template"
                require_function_unloads_without_rest="false"
                function="All_leadsyz(input,counter,runtime,OUT,library_name,base_filename)">
        <cinclude href="interface/template_interface.hpp" />
        <cinclude href="util-generic/dynamic_linking.hpp"/>
        <cinclude href="vector"/>
        <cinclude href="iostream"/>
        <cinclude href ="string"/>
        <cinclude href="list"/>
        <cinclude href="numeric"/> 
        <cinclude href="chrono"/>

            <code><![CDATA[
           
             std::cout <<"SchFrame_control:"<<std::endl;
                  std::tuple<std::vector<std::string>, int, long> out = RESOLVE_INTERFACE_FUNCTION(singular_template_ALL_LEAD)
                        (input, library_name, base_filename);
                      std::vector<std::string> vec = std::get<0>(out);
                      int total_generator = std::get<1>(out);
                      runtime = std::get<2>(out);
                     
                      counter=total_generator;
                      
                         for(int i (0); i<vec.size(); i++)
                                                                 {
                          //std::cout << "leadSyz_Success:"<<vec[i] << std::endl;
                          OUT.emplace_back(vec[i]);
                       
                         //std::cout << "leadSyz_Success:"<<vec[i] << std::endl;
                          //std::cout << "SubliftleadSyz_Success:"<<vec[i] << std::endl;
                          
                          }
                      
                       std::cout << "place_SchFrame_counter:"<<counter << std::endl;
                      
                         std::cout << "total_runtime_SchFrame=" << runtime<<" "<<"nanoseconds"<< std::endl;

            
                   
            
            ]]></code>
        </module>
    
      </defun>
      <connect-read port="library_name" place="place_library_name"/>
      <connect-read port="base_filename" place="place_base_filename"/>
      <connect-in port="input" place="place_input_GB"/>
      
      <connect-out-many port="OUT" place="place_SchFrame"/>
   
       <connect-out port="counter" place="place_SchFrame_counter"/>
        <connect-out port ="runtime" place="place_SchFrame_runtime"/>
       
      
    </transition>


   




 
     




  </net>
</defun>