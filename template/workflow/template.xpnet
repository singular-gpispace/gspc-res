
<defun name="template">
<!-- Struct definitions -->
    <struct name="Std_basis">
        <field name="InputGB" type="string"/>
        <field name="ngen" type="int"/>
    </struct>
      <struct name="lifting">
        <field name="lead_Syz" type="string"/>
        <field name="lift" type="string"/>
        <field name="leadsyz_count" type="int"/>
    </struct>

	<in name="base_filename" type="string" place="place_base_filename"/>
	<in name="library_name" type="string" place="place_library_name"/>
  <in name="input" type="string" place="place_initiate"/>
  <out name ="OUTPUT" type ="string" place ="place_SubLift"/>
  
	<net>
  <place name ="place_initiate" type ="string"/>
 
    <place name ="place_input_GB" type ="string"/>
		<place name="place_base_filename" type="string"/>
		<place name="place_library_name" type="string"/>
     <place name ="place_All_Lead" type ="string"/>
    
    <place name="place_lead" type="string"/>
    <place name="place_Tau" type="string"/>
    <place name ="place_SubLift" type ="string"/>
 
    <place name="place_counter" type="int"/>
 




<place name ="place_StartTime" type ="long"/>

 <place name ="place_E" type ="int"/>
    <place name ="place_N" type ="int"/>

   
    <place name="E" type="int">
      <token>
        <value>0</value>
      </token>
    </place>
    <place name="N" type="int">
      <token>
        <value>0</value>
      </token>
    </place>

  <!-- Transition: StartTime -->
    <transition name="StartTime">
      <defun>
       <out name ="c" type ="control"/>
      <in name="input" type="string"/>
        <out name="output" type="string"/>
        <out name="start_time" type="long"/>
        <module name="singular_template" function="StartTime(start_time,input,c,output)">
         <cinclude href="interface/template_interface.hpp" />
      <cinclude href="util-generic/dynamic_linking.hpp"/>
      <cinclude href="iostream"/>
      <cinclude href="chrono"/>
        <code><![CDATA[
         auto computation_time = std::chrono::high_resolution_clock::now();
    auto duration = computation_time.time_since_epoch();

    start_time= std::chrono::duration_cast<std::chrono::nanoseconds>(duration).count();
     output=input;
    ]]></code>
     </module>
     
  
    
    
      </defun>
      <connect-in port="input" place="place_initiate"/>
      <connect-out port="start_time" place="place_StartTime"/>
       <connect-out port="output" place="place_input_GB"/>
        <connect-out port="c" place="place_control"/>
    </transition>
    
   

<place name="place_control_All_Lead" type="control">
  <token><value>[]</value></token>
</place>


 <place name="place_length_Res" type="int">
  
</place>

    <!-- transition_compute-->
  
     <transition name="All_Lead">
      <defun>
        <require key="worker" mandatory="true"/>
        		
        <in name="library_name" type="string"/>
        <in name="base_filename" type="string"/>
				   
        		<out name="OUTPUT" type="list"/>
           <in name ="C" type="control"/>
           <out name ="counter" type="int"/>
           <in name ="init" type ="string"/>
        		<module name="singular_template"
              		require_function_unloads_without_rest="false"
              		function="All_Lead(init, OUTPUT,C, counter,library_name, base_filename)">
          		<cinclude href="interface/template_interface.hpp" />
          		<cinclude href="util-generic/dynamic_linking.hpp"/>
        <cinclude href="vector"/>
        <cinclude href="iostream"/>
        <cinclude href ="string"/>
        <cinclude href="list"/>
        <cinclude href="numeric"/> 
         <cinclude href="chrono"/>
          			<code><![CDATA[
          //std::cout <<"All_LeadSyz_Input:"<<init<< std::endl;
           auto start_computation = std::chrono::high_resolution_clock::now();
				std::tuple<std::vector<std::string>, int, long> out = RESOLVE_INTERFACE_FUNCTION( singular_template_ALL_LEAD) (init,library_name, base_filename);
              

                std::vector<std::string> vec = std::get<0>(out);
                     counter = std::get<1>(out);
                    //  auto runtime = std::get<2>(out);
             
                    
                 for(int i (0); i<vec.size(); i++)
                                                                 {
                        // std::cout << "SchFrame_Success:"<<vec[i] << std::endl;
                       
                          OUTPUT.emplace_back(vec[i]);

                    }
            std::cout << "place_SchFrame_counter: " << counter << std::endl;
            // std::cout << "total_runtime_SchFrame = " << runtime << " nanoseconds" << std::endl;
          
            		]]></code>
        		</module>
      		</defun>
      	<connect-read port="library_name" place="place_library_name"/>
        <connect-read port="base_filename" place="place_base_filename"/>
			  <connect-read port="init" place="place_input_GB"/>
        <connect-in port="C" place="place_control_All_Lead"/>

       
       <connect-out port="counter" place="place_length_Res"/>
			  <connect-out-many port="OUTPUT" place="place_All_Lead"/>
      
        
  		  </transition>



<place name="place_control" type="control">

</place>


        <!-- Transition 1: lead -->
    <transition name="LEADSYZ">
     <defun>
        <require key="worker" mandatory="true"/>
        <in name="library_name" type="string"/>
        <in name="base_filename" type="string"/>
        <in name="input" type="string"/>
        <in name ="s" type ="control"/>
      <out name ="N" type ="int"/>
      
        <out name="counter" type="int"/>
        <out name="OUT" type="list"/>
       
      <module name="singular_template"
                require_function_unloads_without_rest="false"
                function="leadsyz(input,s,N,counter,OUT,library_name,base_filename)">
        <cinclude href="interface/template_interface.hpp" />
        <cinclude href="util-generic/dynamic_linking.hpp"/>
        <cinclude href="vector"/>
        <cinclude href="iostream"/>
        <cinclude href ="string"/>
        <cinclude href="list"/>
        <cinclude href="numeric"/> 
        <cinclude href="chrono"/>

            <code><![CDATA[
            
            
                  std::tuple<std::vector<std::string>, int, long> out = RESOLVE_INTERFACE_FUNCTION(singular_template_LEAD)
                        (input, library_name, base_filename);
                      std::vector<std::string> vec = std::get<0>(out);
                      int total_generator = std::get<1>(out);
                       N=total_generator;
                    
                      counter=total_generator;
                      
                         for(int i (0); i<vec.size(); i++)
                                                                 {
                          //std::cout << "leadSyz_Success:"<<vec[i] << std::endl;
                          OUT.emplace_back(vec[i]);
                       
                         //std::cout << "leadSyz_Success:"<<vec[i] << std::endl;
                          //std::cout << "SubliftleadSyz_Success:"<<vec[i] << std::endl;
                          
                          }
                      
                      
                          std::cout << "#leadSyz="<<counter<< std::endl;

            
                   
            
            ]]></code>
        </module>
      </defun>
      <connect-read port="library_name" place="place_library_name"/>
      <connect-read port="base_filename" place="place_base_filename"/>
      <connect-read port="input" place="place_input_GB"/>
      <connect-in port="s" place="place_control"/>
      <connect-out-many port="OUT" place="place_lead"/>
     
       <connect-out port ="N" place="place_N"/>
       <connect-out port="counter" place="place_counter"/>
     
    </transition>









     <!-- Transition 2: LIFT-->

      <transition name="LIFT">
        <defun>
     <require key="worker" mandatory="true"/>
    
     <in name="needed_library" type="string"/>
     <in name="base_filename" type="string"/>
     <in name ="lead" type = "string"/>
       <out name="N" type="int"/>
     <out name="E" type ="int"/>
     <in name ="all_lead" type= "string"/>
     <in name ="input_name" type= "string"/>
     
     
    <out name="D" type ="control"/>
     <out name ="LIFT" type= "list"/>
    

             <module name="singular_template"
            require_function_unloads_without_rest="false"
            function="LIFT(N,E,input_name,lead,all_lead,LIFT,needed_library,base_filename,D)">
            <cinclude href="interface/template_interface.hpp" />
           <cinclude href="util-generic/dynamic_linking.hpp"/>
            <cinclude href="vector"/>
            <cinclude href="iostream"/>
            <cinclude href ="string"/>
            <cinclude href="list"/>
            <cinclude href="chrono"/>


            <code><![CDATA[
                  //  std::cout << "in singular _PetriNet_.._LIFT" << std::endl;
                   
                   std::tuple<std::vector<std::string>, int, long> out = RESOLVE_INTERFACE_FUNCTION(singular_template_LIFT)
                  (input_name,all_lead, lead, needed_library, base_filename);
                       

                       std::vector<std::string> vec = std::get<0>(out);
                       int total_generator = std::get<1>(out);
                      
                      //  std::cout << "#LIFT_Terms:"<< counter << std::endl;
                        
                         for(int i (0); i<vec.size(); i++)
                                                                 {
                         //std::cout << "LIFT_Success:"<<out.first[i] << std::endl;
                          LIFT.emplace_back(vec[i]);
                       
                         
                         
      
                    }
                   if (total_generator>=1)
                {
                   N=total_generator-1;
                   E=0;
                } else{
                    if(total_generator==0){
                      E=1;
                      N=0;
                  } 
                }
              
              // std::cout << "LIFT_COUNT_Parent:"<< N << std::endl;
              // std::cout << "LIFT_COUNT_Child:"<< E << std::endl;
              


// std::cout << "LIFT Duration: " << runtime << " milliseconds" << std::endl;
              

            ]]></code>
            </module>
               
   </defun>

  <connect-read port="needed_library" place="place_library_name"/> 
   <connect-read port="base_filename" place="place_base_filename"/>
  <connect-read port="input_name" place="place_input_GB"/>
   <connect-read port="all_lead" place="place_All_Lead"/>
  <connect-in port="lead" place="place_lead"/>
  <connect-out-many port="LIFT" place="place_Tau"/>
  <connect-out port="N" place="place_N"/>
  <connect-out port="E" place="place_E"/>
  <connect-out port="D" place="LIFT_init_Remove"/>



  </transition> 






  <place name="Count_LIFT" type="int">
 <token>
        <value>0</value>
      </token>
    
</place>

 <place name="Final_place_LIFT" type="control"/>
 

 <place name="LIFT_init_Remove" type="control">
 
</place>
<transition name="Count_LIFT">
      <defun>
        <inout name="a" type="int"/>
        <in name="s" type="control"/>
        <module name="singular_template" function="count_LIFT(a,s)">
        <cinclude href="iostream"/>
        <code><![CDATA[
          a=a+1;
      //  std::cout <<"Count_LIFT: " << a << std::endl;
        ]]></code>
        </module>
        
      </defun>
      <connect-inout port="a" place="Count_LIFT"/>
      <connect-in port="s" place="LIFT_init_Remove"/>
     

    </transition>




 <!-- Transition: Result_LIFT -->
<transition name="Result_LIFT">
    <defun>
       <in name="counter" type="int"/>
      
       <in name="lift_count" type="int"/>
       
        <out name="output" type="control"/>
       
         <module name="singular_template" function="Result_LIFT(output,counter,lift_count)">
         <cinclude href="interface/template_interface.hpp" />
      <cinclude href="util-generic/dynamic_linking.hpp"/>
      <cinclude href="iostream"/>
      <cinclude href="chrono"/>
        <code><![CDATA[
          
               
                 std::cout <<"LIFT: " << lift_count << std::endl;
                 std::cout <<"LeadSyz: " << counter << std::endl;
           
            ]]></code>
         </module>
        <condition>
      ${counter}:eq:${lift_count}
    </condition>
    </defun>
    

  <connect-in port="counter" place="place_counter"/>
  <connect-in port="lift_count" place="Count_LIFT"/>
  
  
    <connect-out port="output" place="Final_place_LIFT"/>
</transition>




<place name="place_EndTime" type="long"/>
<place name="place_EndTime_LIFT" type="long"/>

<place name="place_SubLIFT_Syz" type="string"/>







 <!-- Transition: EndTime -->
<transition name="EndTime">
    <defun>
      
        <in name="start_timer" type="long"/>
        <in name="computed_output" type="control"/>
      
        <out name="end_timer" type="long"/>
         <module name="singular_template" function="EndTime(computed_output,end_timer,start_timer)">
         <cinclude href="interface/template_interface.hpp" />
      <cinclude href="util-generic/dynamic_linking.hpp"/>
      <cinclude href="iostream"/>
      <cinclude href="chrono"/>
        <code><![CDATA[
                auto computation_time = std::chrono::high_resolution_clock::now();
                auto duration = computation_time.time_since_epoch();
                long current_time = std::chrono::duration_cast<std::chrono::nanoseconds>(duration).count();
                end_timer = current_time - start_timer; // Calculate elapsed time LIFT
              
                
                  
                // std::cout << "elapsed time_LIFT:= " << end_timer << " nanoseconds" << std::endl;
            ]]></code>
         </module>
     
    </defun>
   
    <connect-read port="start_timer" place="place_StartTime"/>
   
    <connect-in port="computed_output" place="Final_place_LIFT"/>
    <connect-out port="end_timer" place="place_EndTime_LIFT"/>
   
   
</transition>







<!-- Transition 4: SubLIFT-->

      <transition name="SubLIFT">
        <defun>
     <require key="worker" mandatory="true"/>
    
     <in name="needed_library" type="string"/>
     <in name="base_filename" type="string"/>
     <in name ="all_lead" type= "string"/>
     <in name ="input_name" type= "string"/>
     <in name="place_Tau" type="string"/>
    
    
     <out name ="LIFT" type= "list"/>
     <out name ="SUBLIFT" type= "string"/>
      <out name="N" type="int"/>
     <out name="E" type ="int"/>
             <module name="singular_template"
            require_function_unloads_without_rest="false"
            function="SUBLIFT(N,E,input_name,place_Tau,LIFT,all_lead,SUBLIFT,needed_library,base_filename)">
            <cinclude href="interface/template_interface.hpp" />
           <cinclude href="util-generic/dynamic_linking.hpp"/>
            <cinclude href="vector"/>
            <cinclude href="iostream"/>
            <cinclude href ="string"/>
            <cinclude href="list"/>
            <cinclude href="chrono"/>
            
               
                    
                

            <code><![CDATA[

             
                  //  std::cout << "in singular _PetriNet_.._SubLIFT" << std::endl;
                           
                 std::tuple<std::vector<std::string>, int, long> out = RESOLVE_INTERFACE_FUNCTION(singular_template_SUBLIFT)
                 (input_name,all_lead,place_Tau, needed_library, base_filename);
                       
                     std::vector<std::string> vec = std::get<0>(out);
                      int total_generator = std::get<1>(out);
                    
                     

                        
                         for(int i (0); i<vec.size(); i++)
                                                                 {
                         //std::cout << "SUBLIFT_Success:"<<out.first[i] << std::endl;
                          LIFT.emplace_back(vec[i]);
                          
                         
                          
                          
                       
                    
                         
      
                    }
                  if (total_generator>=1)
                {
                   N=total_generator-1;
                   E=0;
                } else{
                    if(total_generator==0){
                      E=1;
                      N=0;
                  } 
                }
               
              
                           
                
              // std::cout << "SubLIFT_COUNT_Parent:"<< N << std::endl;
              // std::cout << "SubLIFT_COUNT_Child:"<< E << std::endl;
              
                 


                    SUBLIFT = place_Tau;
                   //std::cout << "SubLIFT_IN_Place:" << SUBLIFT << std::endl;
                  //std::cout << "SubLIFT_COUNT:"<< tau_count << std::endl; 





       
               
            ]]></code>
            
            </module>
               
   </defun>

  <connect-read port="needed_library" place="place_library_name"/> 
   <connect-read port="base_filename" place="place_base_filename"/>
  <connect-read port="input_name" place="place_input_GB"/>
   <connect-read port="all_lead" place="place_All_Lead"/>
  <connect-in port="place_Tau" place="place_Tau"/>
  <connect-out-many port="LIFT" place="place_Tau"/>
  <connect-out port="SUBLIFT" place="place_SubLift"/>
   <connect-out port="N" place="place_N"/>
  <connect-out port="E" place="place_E"/>

   
 
  
  </transition> 









    <transition name="T1" priority="1">
      <defun>
        <inout name="a" type="int"/>
       
        <in name="n" type="int"/>
        <inout name="c" type="control"/>
        <module name="singular_template" function="Up(a,c, n)">
        <cinclude href="iostream"/>
        <code><![CDATA[
        //std::cout << "T1 _n: " << n << std::endl;
        a = a + n;
      //  std::cout << "T1_sum: " << a<< std::endl;
        ]]></code>
        </module>
      </defun>
     
      <connect-in port="n" place="place_N"/>
      <connect-inout port="a" place="N"/>
     
      <connect-inout port="c" place="control_T2"/>
    </transition>



   
<place name="control_T2" type="control">
  <token><value>[]</value></token>
</place>

    <transition name="T2" priority="0">
      <defun>
        <inout name="a" type="int"/>
        
        <in name="e" type="int"/>
       <inout name="c" type="control"/>
        <module name="singular_template" function="down(a, e, c)">
        <cinclude href="iostream"/>
        <code><![CDATA[
       //std::cout << "T2_e:" << e << std::endl;
        a = a + e;
        // std::cout << "T2_sum:" << a << std::endl;
        ]]></code>
        </module>
      </defun>
     
      <connect-in port="e" place="place_E"/>
      <connect-inout port="a" place="E"/>
    
      <connect-inout port="c" place="control_T2"/>

    </transition>







<transition name="Result_SubLIFT">
  <defun>
   
    
     <inout name="s" type="string"/>
    
   
    <in name="N" type="int"/>
  
    <in name="E" type="int"/>
    
   
    
      
    <module name="singular_template" function="rResult_SubLIFTesult(s,N,E)">
      <cinclude href="interface/template_interface.hpp" />
      <cinclude href="util-generic/dynamic_linking.hpp"/>
       <cinclude href="iostream"/>
      <code><![CDATA[
        
         
      std::cout << "Result_Success: " << s<< std::endl;
        // std::cout << "counter: " <<counter<< std::endl;
        // std::cout << "place_E: " <<E<< std::endl;
        // std::cout << "place_N: " <<N<< std::endl;
         
         
        //std::cout << "E_" <<e<< std::endl;
        //std::cout << "N_" <<n<< std::endl;
      ]]></code>
    </module>
       <condition>
      ${N}:eq:${E}
    </condition>
   
   
   

  </defun>
 
  <connect-in port="s" place="place_SubLift"/>


  <connect-out port="s" place="Final_place_SubLIFT"/>
  <connect-in port="E" place="E"/>
  <connect-in port="N" place="N"/>



  
   
</transition>




<place name="Final_place_SubLIFT" type="string"/>




 <!-- Transition: EndTime -->
<transition name="EndTime_SubLIFT">
    <defun>
        <in name="start_time_LIFT" type="long"/>
        <in name="start_timer" type="long"/>
        <inout name="computed_output" type="string"/>
        
        <out name="end_timer" type="long"/>
         <module name="singular_template" function="EndTime_SubLIFT(start_time_LIFT,computed_output,end_timer,start_timer)">
         <cinclude href="interface/template_interface.hpp" />
      <cinclude href="util-generic/dynamic_linking.hpp"/>
      <cinclude href="iostream"/>
      <cinclude href="chrono"/>
        <code><![CDATA[
                auto computation_time = std::chrono::high_resolution_clock::now();
                auto duration = computation_time.time_since_epoch();
                long current_time = std::chrono::duration_cast<std::chrono::nanoseconds>(duration).count();
               auto end_time = current_time - start_timer; // Calculate elapsed time LIFT
               end_timer =end_time - start_time_LIFT; 
                 std::cout << "Calculate elapsed time:LIFT = " << start_time_LIFT << " nanoseconds" << std::endl;
                   std::cout << "elapsed time_SubLIFT: = " << end_time << " nanoseconds" << std::endl;
                std::cout << "only elapsed time_SubLIFT:= " << end_timer << " nanoseconds" << std::endl;
            ]]></code>
         </module>
     
    </defun>
    <connect-in port="start_timer" place="place_StartTime"/>
    <connect-in port="start_time_LIFT" place="place_EndTime_LIFT"/>
    <connect-in port="computed_output" place="Final_place_SubLIFT"/>
    <connect-out port="end_timer" place="place_EndTime"/>
    <connect-out port="computed_output" place="place_SubLIFT_Syz"/>
   
</transition>









  </net>
</defun>