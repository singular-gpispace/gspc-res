<!-- Put S=0 back in place counter-->
<defun name="template">
<!-- Struct definitions -->
    <struct name="Std_basis">
        <field name="InputGB" type="string"/>
        <field name="ngen" type="int"/>
    </struct>
      <struct name="lifting">
        <field name="lead_Syz" type="string"/>
        <field name="lift" type="string"/>
        <field name="leadsyz_count" type="int"/>
    </struct>

	<in name="base_filename" type="string" place="place_base_filename"/>
	<in name="library_name" type="string" place="place_library_name"/>
  <in name="input" type="string" place="place_input_GB"/>
  <out name ="OUTPUT" type ="string" place ="L"/>
  
	<net>
    <place name ="place_input_GB" type ="string"/>
		<place name="place_base_filename" type="string"/>
		<place name="place_library_name" type="string"/>
    
    
    <place name="place_lead" type="string"/>
    <place name="place_Tau" type="string"/>
   
    <place name ="place_SubLift" type ="string"/>
    
   











<place name="place_control" type="control">
  <token><value>[]</value></token>
</place>


        <!-- Transition 1: lead -->
    <transition name="LEADSYZ">
     <defun>
        <require key="worker" mandatory="true"/>
        <in name="library_name" type="string"/>
        <in name="base_filename" type="string"/>
        <in name="input" type="string"/>
        <in name ="s" type ="control"/>
        <out name="OUT" type="list"/>
        <out name ="Sublift" type ="list"/>
        
      <module name="singular_template"
                require_function_unloads_without_rest="false"
                function="leadsyz(input,s, Sublift,OUT,library_name,base_filename)">
        <cinclude href="interface/template_interface.hpp" />
        <cinclude href="util-generic/dynamic_linking.hpp"/>
        <cinclude href="vector"/>
        <cinclude href="iostream"/>
        <cinclude href ="string"/>
        <cinclude href="list"/>
        <cinclude href="numeric"/> 


            <code><![CDATA[
                   
                   std::pair<std::vector<std::string>, int> out = RESOLVE_INTERFACE_FUNCTION(singular_template_leadSyzGPI)
                        (input, library_name, base_filename);
                     
                       // std::cout << "out.first:"<<out.first.size() << std::endl;
                         for(int i (0); i<out.first.size(); i++)
                                                                 {
                          std::cout << "leadSyz_Success:"<<out.first[i] << std::endl;
                          OUT.emplace_back(out.first[i]);
                          Sublift.emplace_back(out.first[i]);
                         // std::cout << "leadSyz_Success:"<<out.first[i] << std::endl;
                          //std::cout << "SubliftleadSyz_Success:"<<out.first[i] << std::endl;
                          
                          }
                      
               
                           



                              

            ]]></code>
        </module>
      </defun>
      <connect-read port="library_name" place="place_library_name"/>
      <connect-read port="base_filename" place="place_base_filename"/>
      <connect-read port="input" place="place_input_GB"/>
      <connect-in port="s" place="place_control"/>
      <connect-out-many port="OUT" place="place_lead"/>
      <connect-out-many port="Sublift" place="place_SubLift"/>
       
    </transition>








<!-- Transition 2: LIFT-->

      <transition name="LIFT">
        <defun>
     <require key="worker" mandatory="true"/>
    
     <in name="needed_library" type="string"/>
     <in name="base_filename" type="string"/>
     <in name ="lead" type = "string"/>
     <in name ="input_name" type= "string"/>
     
    
     <out name ="LIFT" type= "list"/>
    

             <module name="singular_template"
            require_function_unloads_without_rest="false"
            function="LIFT(input_name,lead, LIFT,needed_library,base_filename)">
            <cinclude href="interface/template_interface.hpp" />
           <cinclude href="util-generic/dynamic_linking.hpp"/>
            <cinclude href="vector"/>
            <cinclude href="iostream"/>
            <cinclude href ="string"/>
            <cinclude href="list"/>
            


            <code><![CDATA[
                   //std::cout << "in singular _PetriNet_.._LIFT" << std::endl;

                   std::pair<std::vector<std::string>, int> out = RESOLVE_INTERFACE_FUNCTION(singular_template_LIFT)
                 (input_name, lead, needed_library, base_filename);
                       
                       
                        
                         for(int i (0); i<out.first.size(); i++)
                                                                 {
                         
                          LIFT.emplace_back(out.first[i]);
                       
                         
                         
      
                    }
               
               std::cout << "LIFT_Success:"<< std::endl;
                              

            ]]></code>
            </module>
               
   </defun>

  <connect-read port="needed_library" place="place_library_name"/> 
   <connect-read port="base_filename" place="place_base_filename"/>
  <connect-read port="input_name" place="place_input_GB"/>
  <connect-in port="lead" place="place_lead"/>
  <connect-out-many port="LIFT" place="place_Tau"/>
 




  </transition> 
  
      









     <!-- Transition 4: SubLIFT-->

      <transition name="SubLIFT">
        <defun>
     <require key="worker" mandatory="true"/>
    
     <in name="needed_library" type="string"/>
     <in name="base_filename" type="string"/>
    
     <in name ="input_name" type= "string"/>
     <in name="place_Tau" type="string"/>
    
     
     <out name ="LIFT" type= "list"/>
     <out name ="SUBLIFT" type= "string"/>
    

             <module name="singular_template"
            require_function_unloads_without_rest="false"
            function="SUBLIFT(input_name,place_Tau,LIFT,SUBLIFT,needed_library,base_filename)">
            <cinclude href="interface/template_interface.hpp" />
           <cinclude href="util-generic/dynamic_linking.hpp"/>
            <cinclude href="vector"/>
            <cinclude href="iostream"/>
            <cinclude href ="string"/>
            <cinclude href="list"/>
            
            
               
                    
                

            <code><![CDATA[
                   //std::cout << "in singular _PetriNet_.._SubLIFT" << std::endl;
                           
                   std::pair<std::vector<std::string>, int> out = RESOLVE_INTERFACE_FUNCTION(singular_template_SUBLIFT)
                 (input_name,place_Tau, needed_library, base_filename);
                       
                     
                        
                         for(int i (0); i<out.first.size(); i++)
                                                                 {
                        // std::cout << "SUBLIFT_Success:"<<out.first[i] << std::endl;
                          LIFT.emplace_back(out.first[i]);
                          
                         
                          
                          
                       
                    
                         
      
                    }
                 


                    SUBLIFT = place_Tau;
                    std::cout << "SUBLIFT_Success:"<< std::endl;
                   //std::cout << "SubLIFT_IN_Place:" << SUBLIFT << std::endl;
                  //std::cout << "SubLIFT_COUNT:"<< tau_count << std::endl;        
               
            ]]></code>
            
            </module>
               
   </defun>

  <connect-read port="needed_library" place="place_library_name"/> 
   <connect-read port="base_filename" place="place_base_filename"/>
  <connect-read port="input_name" place="place_input_GB"/>
  <connect-in port="place_Tau" place="place_Tau"/>
  <connect-out-many port="LIFT" place="place_Tau"/>
  <connect-out port="SUBLIFT" place="place_SubLift"/>
  
  
  
  </transition> 


  


  
<place name="left_init" type="control">
  <token><value>[]</value></token>
</place>
<place name="right_init" type="control"/>
<place name="L" type="string"/>
<place name="R" type="string"/>



    <transition name="LHS">
      <defun>
        <inout name="a" type="string"/>
        <inout name="s" type="control"/>

        <module name="singular_template" function="count(a)">
        <cinclude href="iostream"/>
        <code><![CDATA[
       //std::cout << "LHS: " << a << std::endl;
        ]]></code>
        </module>
      </defun>
      <connect-in port="s" place="left_init"/>
      <connect-out port="s" place="right_init"/>
      <connect-in port="a" place="place_SubLift"/>
      <connect-out port="a" place="L"/>
    </transition>




  
<transition name="RHS">
      <defun>
        <inout name="a" type="string"/>
        <inout name="s" type="control"/>
        <module name="singular_template" function="plus(a)">
        <cinclude href="iostream"/>
        <code><![CDATA[
       // std::cout << "RHS: " << a << std::endl;
        ]]></code>
        </module>
      </defun>
      <connect-in port="a" place="place_SubLift"/>
      <connect-in port="s" place="right_init"/>
      <connect-out port="s" place="left_init"/>
      <connect-out port="a" place="R"/>

    </transition>


<!-- Transition 5: Reduce-->
    <transition name="Reduce">
      <defun>
      <require key="worker" mandatory="true"/>
    
     <in name="library_name" type="string"/>
     <in name="base_filename" type="string"/>
        <out name="s" type="string"/>
        <in name="l" type="string"/>
        <in name="r" type="string"/>
        
       
     <module name="singular_template"
              		require_function_unloads_without_rest="false"
              		function="reduce(library_name,base_filename,s,l,r)">
          		<cinclude href="interface/template_interface.hpp" />
          		<cinclude href="util-generic/dynamic_linking.hpp"/>
              <cinclude href="iostream"/>
          			<code><![CDATA[
						s = RESOLVE_INTERFACE_FUNCTION(singular_template_reduce)(l,r,library_name, base_filename
							); 
            //std::cout << "Reduce:" << s << std::endl;
            		]]></code>
                 
        		</module>
      </defun>
      <connect-read port="library_name" place="place_library_name"/> 
      <connect-read port="base_filename" place="place_base_filename"/>
      <connect-in port="l" place="L"/>
      <connect-in port="r" place="R"/>
      <connect-out port="s" place="place_SubLift"/>
      
       
    </transition> 

  </net>
</defun>