  link l="ssi:r temp/input";
// ** redefining l (link l="ssi:r temp/input";)
> proc Add_GPI(token input, int N)
{ smatrix c=Add_GPI(m,40);
  proc Add_GPI(token input, int N)
{ m.data;
  def m=read(l);
// ** redefining m (def m=read(l);)
> proc Add_GPI(token input, int N)
{ smatrix c=Add_GPI(m,40);
  proc Add_GPI(token input, int N)
{ m.data;
  def nr=m.r_data;
// ** redefining nr (def nr=m.r_data;)
> setring nr;
> m.data;
[1]:
   _[1]=w2-xz
   _[2]=wx-yz
   _[3]=x2-wy
   _[4]=xy-z2
   _[5]=y2-wz
[2]:
   5
>

proc Add_GPI(int N)
{
    def inputRing = basering;  // Save the input ring
    string path1 = "/home/santosh/gspc-res/example_dir/temp/";
   
    // string filename = "Reduce.ssi";

  
    // link l0 = "ssi:w " + path1 + filename;
        

    smatrix C;  // Initialize C
    module M;
   int first_time = 0;  // Initialize first_time as 0 (false)
   int k=1;
    while(k <= N) {
        string file_k = string(k) + ".ssi";  
        link l = "ssi:r " + path1 + file_k;  

        if (status(l, "exists") == "yes") 
        {
          def t = read(l);  //Read file
          close(l);  // Close  l after reading
  
          def nr = t.r_data;
          setring nr;
          module M;
          smatrix sM = t.data[2];
          // write(l0,sM,"sM");
          M=sM;
          setring inputRing;
           M = fetch(nr, M);
           sM=M;
          //  C = fetch(inputRing, C);
          // Logic to initialize or update C
         
             if (first_time == 0) 
             {  
            // sM=fetch(inputRing,sM);
              // write(l0,first_time,"first_time"); 
                     C = sM;  // Initialize C with sM       
                     first_time = 1;  // Set first_time to 1 (true) after initialization
             } else {
                  // sM=fetch(inputRing,sM);
                     C = C + sM;           
                 } 
              
            string command = "rm " + path1 + file_k;  // Construct the remove command
            system("sh", command);  // Execute the shell command to remove the file

           } else {

                  k=k+1;
                 
          }    
    }

  // close(l0);
 print("killer smatrix");
 print(C);
   token output;
    output.fieldnames = list("generators", "FirstSyz_matrix");   
    output.data[1] = C;  
    output.data[2] = 1;   
    output.data[3] = ncols(C);  

    return(output);
}



rtimer=0;
 system("--ticks-per-sec",1000); // set timer resolution to ms
 int t=rtimer;
def c= Add_GPI(m,72900);
c;

rtimer-t;