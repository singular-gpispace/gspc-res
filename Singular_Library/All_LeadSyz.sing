
LIB "IterativeRes.lib";


//ring S= 0, (w,x,y,z), (dp,c);
//ideal I_Gr= w2-x*z, w*x- y*z, x2-w*y, x*y- z2, y2- w*z;

//ring R= 0, (x(1..10)), (lp,c);



//matrix mS[2][4]= x(4)+ x(6), x(6)+ x(3), x(8)+ x(3), x(1)-x(3), x(2)-x(4), x(5)-x(7), x(8)-x(7), x(2)+ x(3), x(5)- x(7), x(10)+ x(8), x(1) -x(2);
//ideal I_minor= minor(mS,2);
//ideal I_Gr = std(I_minor);




//smatrix s_t= all_Syz_sparse(I_Gr);
//s_t;
//smatrix ss_t= all_Syz_sparse2(s_t, J, 2);
//list List=lead_Sparse_Syz2(s_t, J, 2);
//List;
//sparse_sublift TT= List[2];
//vector s=x(5)*gen(3);
//vector t= x(1)*x(7)*gen(1);

//list ss_r= liftTree2(s_t, TT, J, 2);
//ss_r;
print("All terms");
//list L=iterativeSubLiftTree2(s_t, TT, J, 2);
//L;
//int ab=coM2(J[2], s, t, J, 3);
//ab;








//Example From the paper refined algorithms to compute syzygies
// ring S= 0, (w,x,y,z), (lp,c);
// poly f1 = wx + wz + x2 + 2xz - z2;
// poly f2 = wy - wz - xz - yz - 2z2;
// poly f3= xy + z2; 
// ideal I_Gr=f1,f2,f3;

//Koszul Complex
// ring R=0,(w,x,y,z),lp;
// ideal I_Gr=w,x,y,z;

//timing :
 //Example from Singular book
//  ring R=0, (x,y,z), dp;
//  ideal J1=y*z+z^2,y^2 + x*z,x*y+z^2,z^3,x*z^2,x^2*z;
//  ideal I_Gr=std(J1);

//Example1:
// ring R= 0, (w,x,y,z), (dp,c);
// ideal I_Gr= w2-x*z, w*x- y*z, x2-w*y, x*y- z2, y2- w*z;


//Example2:
// ring R= 0, (x(1..10)), (lp,c);

// matrix mS[2][4]= x(4)+ x(6), x(6)+ x(3), x(8)+ x(3), x(1)-x(3), x(2)-x(4), x(5)-x(7), x(8)-x(7), x(2)+ x(3), x(5)- x(7), x(10)+ x(8), x(1) -x(2);
// ideal I_minor= minor(mS,2);
// I_minor;
// ideal I_Gr = std(I_minor);






//Example3:

//Define the ring with five variables over the rational numbers
// ring R = 0, (x0, x1, x2, x3, x4), (dp,c);

// //Define the generators of the ideal for the canonical genus 5 curve
// poly Q1 = x0*x1 - x2^2;
// poly Q2 = x0*x2 - x1*x3;
// poly Q3 = x0*x3 - x1*x4;
// poly Q4 = x0*x4 - x2*x3;
// poly Q5 = x1*x2 - x3^2;
// poly Q6 = x1*x3 - x2*x4;
// poly Q7 = x1*x4 - x3*x4;
// poly Q8 = x2*x3 - x4^2;
// poly Q9 = x2*x4 - x3*x0;
// poly Q10 = x3*x4 - x0*x1;


// ideal J1= Q1, Q2, Q3, Q4, Q5, Q6, Q7, Q8, Q9, Q10;
// J1;
// print("GB");
// ideal I_Gr=std(J1);




//Example4:
// ring R = 0, (x0, x1, x2, x3, x4), dp; // Example for n+1 = 5 variables

// poly f1 = x0^2 + x1^2 + x2^2 + x3^2 + x4^2;
// poly f2 = x0*x1 + x2*x3 + x4^2;
// poly f3 = x0*x2 + x1*x3 + x4*x0;
// poly f4 = x0*x3 + x1*x4 + x2*x0;
// poly f5 = x0*x4 + x1*x2 + x3*x1;
// ideal J1= f1,f2,f3,f4,f5;
// J1;
// print("GB");

// ideal I_Gr= std(J1);

















//Example 5

// ring R = 0, (x0, x1, x2, x3, x4, x5), (dp,c);

// // Step 2: Generate a regular sequence with 5 polynomials
//  poly f1 = x0 + x1 + x2 + x3;
//  poly f2 = x0*x1 + x2*x3 + x4*x5;
//  poly f3 = x0*x2 + x1*x3;
//  poly f4 = x0*x3 + x1*x4 + x2*x5;
//  poly f5 = x0*x4 + x1*x5;


//  ideal J1 = f1, f2, f3, f4, f5;
//  ideal I_Gr=std(J1);

//Example 6
ring R=0, (x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10),dp;
ideal J0;

J0[1]=5478184*x7+17974881*x8+10172252*x9+3606363*x10;
J0[2]=181233*x6+896498*x7+2615211*x8+1387366*x9+625050*x10;
J0[3]=4925*x5-237*x6-17222*x7-54504*x8-28574*x9-11575*x10;
J0[4]=132*x4-31*x5+213*x6+826*x7+2346*x8+1222*x9+629*x10;
J0[5]=336*x3+164*x4+821*x5+537*x6-462*x7-1774*x8-866*x9-263*x10;
J0[6]=254*x2+177*x3-27*x4+5*x5+123*x6+217*x7+306*x8+172*x9+137*x10;
J0[7]=x1-6*x2-4*x3-3*x6-4*x7-6*x8-3*x9-3*x10;
J0[8]=x0-39*x2-28*x3+4*x4-x5-19*x6-33*x7-48*x8-26*x9-21*x10;
print("ideal J0=");
ideal I_Gr=J0;






list J= allLeadSyz(I_Gr);
//J;




// timer
rtimer=0;
 system("--ticks-per-sec",1000); // set timer resolution to ms
 int t=rtimer;

list L_scyreyer=freeResSch(I_Gr, J);
L_scyreyer;

rtimer-t;
//print("Schreyer");
print("timer");

//print(L_scyreyer[3]);
//matrix m3= L_scyreyer[3];

//matrix m4=L_scyreyer[4];


//print(m3*m4);
print("fres");

//syz(m4);
//def L= fres(I_Gr, 0);
//L;
//matrix m1= L[5];
//m1;

