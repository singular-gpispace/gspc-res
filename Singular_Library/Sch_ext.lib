//////////////////////////////////////////////////////////////////////////////
version=" ";
category="Noncommutative";
info="
LIBRARY: sresforextalg.lib     Schreyer's algorithm for modules over the exterior algebra
AUTHORS: Ramesh, L.,           ramesh@mathematik.uni-kl.de   

OVERVIEW:
Procedures for and involving computing Schreyer resolution of modules over the exterior algebra

PROCEDURES:
schreyerSyzExt(m);            (refined) Schreyer syzygy of a module over the exterior algebra 
sresExt(m,p);                 free resolution of module m over the exterior algebra using refined Schreyer alg        
mresExt(m,p);                 minimal free resolution of module m over the exterior algebra using refined Schreyer alg
sheafCohBGGsres(M,l,h)        cohomology of twists of the coherent sheaf F on P^n
                              associated to coker(M). The range of twists is determined by l,h.
";

LIB "nctools.lib"; // for ncalg
LIB "matrix.lib"; // for submat
LIB "sheafcoh.lib"; // for displayCohom
//LIB "tst.lib"; tst_init(); tst_ignore("// ** loaded "); tst_ignore("// ** _ is no standard basis");

///////////////////////////////////////////////////////////////////////////////

proc leadmonomial_nc(def s) 
{
  int e;
  poly m;

  if(typeof(s) == "vector"){
    e=leadexp(s)[nvars(basering)+1];
    m=leadmonom(s)[e,1];
  }
  if(typeof(s) == "poly"){
    m=leadmonom(s);
   }
  return(m);
}

proc leadterm(def s)
{
  int e;
  poly m;

  if(typeof(s) == "vector"){
    e=leadexp(s)[nvars(basering)+1];
    m=lead(s)[e,1];
  }
  if(typeof(s) == "poly"){
    m=lead(s);
   }
  return(m);
}
















proc lcm_(poly v, poly w)
{
    string strv = string(v);
    string strw = string(w);
    int sizev = size(strv);
    int sizew = size(strw);
    int n = nvars(basering);
    int i;
    intvec expv, expw;
    poly ans = 1;
    if (strv[sizev] == "2" && strw[sizew] == "2"){
      ans = 0;
      return(ans); // not sure about type
    }
    else{
      if (strv[sizev] != "2" && strw[sizew] != "2"){
        expv = leadexp(v);
        expw = leadexp(w);
        for (i=1; i<=n; i++){
          if (expv[i]==1 || expw[i]==1){
            ans = ans*var(i);
          }
        }
        return(ans);
      }
      else {
        if (strv[sizev] == "2"){
          expw = leadexp(w);
          expv = leadexp(v);
          for (i=1; i<=n; i++){
            if (expv[i] == 2){
              ans = ans*(var(i))^2;
            }
            else{
              if (expw[i] == 1){
                ans = ans*var(i);
              }
            }
          }
        }
        else{
          expw = leadexp(w);
          expv = leadexp(v);
          for (i=1; i<=n; i++){
            if (expw[i] == 2){
              ans = ans*(var(i))^2;
            }
            else{
              if (expv[i] == 1){
                ans = ans*var(i);
              }
            }
          }
        }
        return(ans);
      }
    }
}


proc lead_syz_(module m)
{
  int r = size(m);
  int n = nvars(basering);
  module M = std(freemodule(r));
  vector pi, pj, t, s;
  poly Li, Lj, mji;
  int i, j, k, expi, expj;
  module temp_mod_1, temp_mod_2;
  module lead_mod; //this is what we will return

  for(i=2; i<=r; i++){
    pi = m[i];
    for(j=1; j<i; j++){
      pj = m[j];
      expi = leadexp(pi)[n+1];
      expj = leadexp(pj)[n+1];
      if(expi == expj){
        Li = leadmonomial_nc(pi);
        Lj = leadmonomial_nc(pj);
        mji = lcm_(Lj,Li)/leadterm(pi);
        t = mji*M[i];
        for (k=1;k<=size(lead_mod);k++){
          temp_mod_1 = lead_mod[k];
          attrib(temp_mod_1, "isSB", 1);
          if (NF(t, temp_mod_1)==0){
            t = 0;
            break;
          }
          else{
            temp_mod_2 = t;
            attrib(temp_mod_2, "isSB", 1);
            if(NF(lead_mod[k], temp_mod_2)==0){
              lead_mod = delete(lead_mod, k);
              k = k-1;
            }
          }
        }
        if(t != 0){
          lead_mod[size(lead_mod)+1] = t;
        }
      }
    }
  }
  return(lead_mod);
}



proc phi_(vector s, module m)
{
  int n = nvars(basering);
  int i = leadexp(s)[n+1];
  //s is a term
  poly t = leadterm(s);
  return(t*m[i]);
}



 proc remove_LOT_(vector g, module m)
{
  vector L;
  int i;
  vector LOT;
  module temp_I;
  while(g != 0){
    for(i=1; i<=size(m); i++){
      L = lead(g);
      temp_I = leadmonom(m[i]);
      attrib(temp_I, "isSB", 1);
      if(NF(L, temp_I) == 0){
        LOT = LOT+L;
        break;
      }
    }
    g = g - L;
  }
  return(LOT);
}

proc greater_than_(vector s, vector v, module M)
{
  int n = nvars(basering);
  int i = leadexp(s)[n+1];
  int j = leadexp(v)[n+1];
  poly mi = leadterm(s);
  poly mj = leadterm(v);
  if (lead(mi*M[i]) > lead(mj*M[j])){
    return(1);
  }
  else{
    if(lead(mi*M[i]) == lead(mj*M[j]) && i>j){
      return(1);
    }
    return(0);
  }
}

proc lift_tree_with_order(vector s, module M, list LL)
{
  vector g = phi_(s, M);
  vector T = remove_LOT_(g, M);
  vector L;
  vector ans = s; 
  int i;
  poly m;
  module temp_I;
    list TT;
  int cl = 1;  // Counter for the TT list
  ideal im, iF_, imif, iL;
  while (T != 0){
    L = lead(T);
    for(i=1; i<=size(M); i++){
      temp_I = leadmonom(M[i]);
      attrib(temp_I, "isSB", 1);
      if(NF(L, temp_I)==0){
        m = leadmonomial_nc(L)/leadterm(M[i]); 
        
        //check sign: 
        if (m*leadterm(M[i])!= leadterm(L)){
          m = -m;
        } 
        //schreyer order algorithm should be called here
        if (gr_than_for_res(s,m*gen(i),LL)){
            // Store m * gen(i) in TT
        TT[cl] = m * gen(i);
        cl++;
           T = T - m * M[i];
          break;
        }
      }
    }
    T = T - L;
  }
  return(ans);
}

proc lift_tree_(vector s, module M)
{
  // Initialize the list to store m * gen(i) terms
  list TT;
  int cl = 1;  // Counter for the TT list

  // Compute the initial transformed vector
  vector g = phi_(s, M);
  vector T = remove_LOT_(g, M);
  vector L;
  int i;
  poly m;
  module temp_I;

  // Main loop to process T while it's non-zero
  while (T != 0) {
    L = lead(T);  // Extract the leading term of T
    for (i = 1; i <= size(M); i++) {
      temp_I = leadmonom(M[i]);
      attrib(temp_I, "isSB", 1);  // Mark as standard basis for comparison
      if (NF(L, temp_I) == 0) {  // Check if the normal form is zero
        m = leadmonomial_nc(L) / leadterm(M[i]);  // Compute the quotient

        // Check and correct the sign if needed
        if (m * leadterm(M[i]) != leadterm(L)) {
          m = -m;
        }

        // Store m * gen(i) in TT
        TT[cl] = m * gen(i);
        cl++;

        // Subtract the corresponding term from T
        T = T - m * M[i];
        break;
      }
    }
    T = T - L;  // Remove the processed term from T
  }

  return(TT);  // Return the list of m * gen(i)
}






proc lift_subtree_(vector s, module M)
{
  // Initialize the list to store m * gen(i) terms
  list TT;
  int cl = 1;  // Counter for the TT list

  // Compute the initial transformed vector
  vector g = phi_(s, M);
  g = g - lead(g);  // Remove the leading term
  vector T = remove_LOT_(g, M);
  vector L;
  poly m;
  int i;
  module temp_I;

  // Main loop to process T while it's non-zero
  while (T != 0) {
    L = lead(T);  // Extract the leading term of T
    for (i = 1; i <= size(M); i++) {
      temp_I = leadmonom(M[i]);
      attrib(temp_I, "isSB", 1);  // Mark as standard basis for comparison
      if (NF(L, temp_I) == 0) {  // Check if the normal form is zero
        m = leadmonomial_nc(L) / leadmonomial_nc(M[i]);  // Compute the quotient

        // Check and correct the sign if needed
        if (m * leadterm(M[i]) != leadterm(L)) {
          m = -m;
        }

        // Store m * gen(i) in TT
        TT[cl] = m * gen(i);
        cl++;

        // Subtract the corresponding term from T
        T = T - m * M[i];
        break;
      }
    }
    T = T - L;  // Remove the processed term from T
  }

  return(TT);  // Return the list of m * gen(i)
}
