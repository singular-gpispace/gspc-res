///////////////////////////////////////
version="version templategp.lib 0.2 Mar 2023 ";
category="Commutative algebra";
info="
LIBRARY: templategp.lib  demo procedures for template pattern

OVERVIEW:
    This library contains SINGULAR procedures to demonstrate the
    the Singular/GPI-Space framework.
    The newstruct types token  must be defined.

    PROCEDURES:
    stdmodp(token,token)               computes a standard basis
                                           modulo p
";
  LIB "matrix.lib";
  LIB "polylib.lib";
  LIB "zeroset.lib";
  LIB "modules.lib";

proc stdmodp (token input)
"USAGE: stdmodp(input); input token
RETURN: an token output containing a standard basis 
output.generators of the ideal input.generators in a ring
with prescribed characteristic input.modulus
NOTE: The types token are defined . This procedure is 
intended to be called as a transition procedure inside the
worker process (that is, the "inner" instances of SINGULAR).
"
{
    def br = basering;
    int p = input.data[2];
    def I = input.data[1];
    def lbr = ringlist(br);
    lbr[1] = p;
    def rp = ring(lbr);
    setring rp;
    def I = imap(br,I);
    def J = std(I);
    setring br;  
    ideal J = fetch(rp,J);
    token output;
    output.fieldnames = list("generators","modulus_result");
    output.data[1] = J;
    output.data[2] =size(J);
   
    return(output);
}
proc COPY_Transition(token input ){ 

    return(input);
    }

proc leadSyz(ideal f) {
//timer=0;
//system("--ticks-per-sec",1000); // set timer resolution to ms
 //int t1=timer;
 token Token;
    int a, b, i, j, k;
    vector s, t;
    int r = size(f);
    module L;   // Initialize an empty set
    list leadtoken;
    matrix m[r][r];

    for (a = 1; a <= r; a++) {
        for (b = 1; b <= r; b++) {
            m[a, b] = lcm(leadmonom(f[b]), leadmonom(f[a])) / lead(f[b]);
        }
    }

    int cc = 1;
    

    for (i = 2; i <= r; i++) {
       
        
        for (j = 1; j < i; j++) {
            t = m[j, i] * gen(i);
         
            // Check divisibility conditions and remove a generator if necessary
            for (k = 1; k <= size(L); k++) {
              
               //print("i = "+string(i) + "j = "+string(j)  + "t = "+string(t) + "s = "+ //string(s)+" L ="+string(L));
                 
                 //print(s);
                    s = L[k];
               
               
                // Check if s divides t
                 if (NF(t, s) == 0) {
                  
                    t = 0;
                    break;
                 } else {
                    // Check if t divides s
                    if (NF(s, t) == 0) {                  
                        
                         L = delete(L, k); 
                         k=k-1;
                           cc=cc-1;
                                         
                        
                      
                    }
                }
            }
            
            // If t survived the checks and no generator was deleted, add it to the module L
            if (t != 0) {
           
              
                L[cc]=t;

                cc++;

               
            } 
             
        } 
    }// timer-t1;
      // print(" timer of leadsyz");
return(L); 
    

}
proc syzGpI(token Token){
ideal f= Token.data[1];
int s=Token.data[2];
def LL= leadSyz(f);
int r= size(LL);
list LLT;
int i;
token Input;
for (i=1; i<=r; i++){
Input.fieldnames=list("Santosh, Leadsyz");
Input.data[1]=LL[i];
Input.data[2]=r;
LLT[i]=Input;

} 
return(LLT);
    
}

proc syz_GpI(ideal f){

def LL= leadSyz(f);
int r= size(LL);
list LLT;
int i;
token Input;
for (i=1; i<=r; i++){
Input.fieldnames=list("Santosh, Leadsyz");
Input.data[1]=LL[i];
Input.data[2]=r;
LLT[i]=Input;

} 
return(LLT);
    
}




proc all_leadsyz_GpI(token Token) {
  def f=  Token.data[1];
 
  token LLT;
  int k;
  def LT= allLeadSyz(f);
 
   int r = size(LT);
  for (k = 1; k <=r; k++) {
    token Ld;
    Ld.fieldnames = list("generator", "All_Lead_Syz_Sparse_matrix");  
   
    Ld.data[1]= LT[k];
    Ld.data[2]=k;
    
   
    LLT.fieldnames[k] = "generator";  
    LLT.data[k] = Ld; 

  }
      LLT.fieldnames[size(LLT.fieldnames) + 1] = "total_number_generator";  
      LLT.data[size(LLT.data) + 1] = r;  
    return (LLT);  
}

proc iterative_all_leadsyz_GpI(token tok){
  def f= tok.data[1];
  module F;
  token Tok;
  if(typeof(f)=="ideal"){
    F=leadSyz(f);
  }
  if(typeof(f)=="module"){
    F=Sec_leadSyz(f);
  }
  Tok.fieldnames=list("syzygy", "all_lead"); 
  Tok.data[1]=F;
  return(Tok);
}

    